<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>
#pragma GCC optimize ("O3")
#ifdef ONLINE_JUDGE
#pragma GCC target("sse4.1")
#pragma GCC optimization("unroll-loops")
#endif

using namespace std;
typedef long long ll;
#define rep(i,a,n) for(i=a; i<n; i++)
#define repr(i,a,n) for(i=a; i>=n;i--)
#define repit(x, k) for(auto x:k)
#define vi vector<int>
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vvi vector<vector<int>>
#define pii pair<int, int>
#define pll pair<ll, ll>
#define fi first
#define se second
#define nl '\n'
#define pb push_back
#define lb(t) lower_bound(t)
#define ub(t) upper_bound(t)
#define mp(a,b) make_pair(a, b)
#define mset(a, val) memset(a, val, sizeof(a))
#define all(v) v.begin(), v.end()
#define SPEED ios::sync_with_stdio(false); cin.tie(0); cout.tie(0)

// DEBUGGING
#ifndef ONLINE_JUDGE
#define deb(x) cerr<<x<<" ";
#define debug(x) cerr<<#x<<" ";__print(x);cerr<<"\n-------\n";
#define enl cerr<<nl;
template <class T>void __print(T t) {cerr << t;}
template<class T,class V>void __print(pair <T,V> p){cerr<<"{";__print(p.fi);cerr<<", ";__print(p.se);cerr<<"}\n";}
template<class T>void __print(vector<T> v){cerr<<"[ ";for(T i:v){__print(i);cerr<<" ";}cerr<<"]\n";}
template<class T>void __print(set<T> v){cerr<<"[ ";for(T i:v){__print(i);cerr<<" ";}cerr<<"]\n";}
template<class T>void __print(multiset<T> v){cerr<<"[ ";for(T i:v){__print(i);cerr<<" ";}cerr<<"]";}
template<class T,class V>void __print(map<T,V>m){for(auto i:m){cerr<<"{";__print(i.fi);cerr<<" [";__print(i.se);cerr<<"] "<<"}\n";}}
#else
#define deb(x) 42;
#define debug(x) 42;
#define enl 42;
#endif
// END DEBUGGING

// IMP COSTANTS
#define M 1000000007 // 9 zeros + 7
#define M2 998244353
#define epsilon 1e-9
#define PI  3.14159265
#define INF 1e9+5 // 9 zeros + 5
#define INFF  1000000000000000005ll //18 zeros + 5



int main(){
	SPEED;
	ll i,j;



	return 0;
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>basic</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
